name: CI

on:
  push:
    branches: [main]
  pull_request:
  workflow_dispatch:

concurrency:
  group:
    ${{ github.workflow }}-${{ github.ref_name }}-${{
    github.event.pull_request.number || github.sha }}
  cancel-in-progress: true

jobs:
  test-api:
    runs-on: ubuntu-latest
    steps:
      - run: echo "üéâ The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "üêß This job is now running on a ${{ runner.os }} server hosted by GitHub!"
      - run: echo "üîé The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v4
      - run: echo "üí° The ${{ github.repository }} repository has been cloned to the runner."
      - run: echo "üñ•Ô∏è The workflow is now ready to test your code on the runner."
      - name: List files in the repository
        run: |
          ls ${{ github.workspace }}
      - run: echo "üçè This job's status is ${{ job.status }}."
      - name: Set up Python 3.10
        uses: actions/setup-python@v3
        with:
          python-version: "3.10"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      - name: Test with pytest
        run: |
          pytest

  build:
    name: "build image"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and export
        uses: docker/build-push-action@v6
        with:
          tags: uv-docker-example:latest
          cache-from: type=gha,scope=uv-docker-example
          cache-to: type=gha,mode=min,scope=uv-docker-example
          outputs: type=docker,dest=/tmp/uv-docker-example.tar

      - name: Build and export (multistage)
        uses: docker/build-push-action@v6
        with:
          file: Dockerfile
          tags: uv-docker-example-multistage:latest
          cache-from: type=gha,scope=uv-docker-example-multistage
          cache-to: type=gha,mode=min,scope=uv-docker-example-multistage
          outputs: type=docker,dest=/tmp/uv-docker-example-multistage.tar

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: uv-docker-example
          path: /tmp/uv-docker-example.tar

      - name: Upload artifact (multistage)
        uses: actions/upload-artifact@v4
        with:
          name: uv-docker-example-multistage
          path: /tmp/uv-docker-example-multistage.tar

  test:
    name: "test image"
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: uv-docker-example
          path: /tmp

      - name: Download artifact (multistage)
        uses: actions/download-artifact@v4
        with:
          name: uv-docker-example-multistage
          path: /tmp

      - name: Load images
        run: |
          docker load --input /tmp/uv-docker-example.tar
          docker load --input /tmp/uv-docker-example-multistage.tar
          docker image ls -a

      - name: Test command line
        run: ./run.sh hello


